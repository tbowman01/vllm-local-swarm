worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $http_authorization zone=token:10m rate=200r/m;

    # Upstream services
    upstream auth_service {
        server auth-service:8005;
    }

    upstream orchestrator_service {
        server orchestrator-auth:8004;
    }

    upstream memory_service {
        server memory-api-auth:8003;
    }

    upstream model_service {
        server vllm-phi:8000;
    }

    # HTTP to HTTPS redirect (uncomment when SSL is configured)
    # server {
    #     listen 80;
    #     server_name _;
    #     return 301 https://$host$request_uri;
    # }

    # Main server block
    server {
        listen 80;
        # listen 443 ssl http2;
        server_name _;

        # SSL configuration (uncomment when certificates are available)
        # ssl_certificate /etc/nginx/ssl/cert.pem;
        # ssl_certificate_key /etc/nginx/ssl/key.pem;
        # ssl_protocols TLSv1.2 TLSv1.3;
        # ssl_ciphers HIGH:!aNULL:!MD5;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # CORS headers
        add_header 'Access-Control-Allow-Origin' '$http_origin' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-API-Key' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Authentication service endpoints
        location /auth/ {
            # Apply rate limiting to login endpoint
            location = /auth/login {
                limit_req zone=login burst=2 nodelay;
                proxy_pass http://auth_service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Other auth endpoints
            proxy_pass http://auth_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Orchestrator service endpoints (protected)
        location /api/tasks/ {
            # Rate limiting
            limit_req zone=api burst=10 nodelay;
            
            # Authentication check
            auth_request /auth/verify;
            auth_request_set $auth_status $upstream_status;
            auth_request_set $auth_user $upstream_http_x_auth_user;
            auth_request_set $auth_role $upstream_http_x_auth_role;
            
            # Pass auth info to backend
            proxy_set_header X-Auth-User $auth_user;
            proxy_set_header X-Auth-Role $auth_role;
            
            # Proxy to orchestrator
            proxy_pass http://orchestrator_service/tasks/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # Memory service endpoints (protected)
        location /api/memory/ {
            # Rate limiting
            limit_req zone=api burst=10 nodelay;
            
            # Authentication check
            auth_request /auth/verify;
            auth_request_set $auth_status $upstream_status;
            auth_request_set $auth_user $upstream_http_x_auth_user;
            auth_request_set $auth_role $upstream_http_x_auth_role;
            
            # Pass auth info to backend
            proxy_set_header X-Auth-User $auth_user;
            proxy_set_header X-Auth-Role $auth_role;
            
            # Proxy to memory service
            proxy_pass http://memory_service/memory/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
        }

        # Model service endpoints (protected)
        location /api/v1/chat/ {
            # Rate limiting
            limit_req zone=token burst=5 nodelay;
            
            # Authentication check
            auth_request /auth/verify;
            auth_request_set $auth_status $upstream_status;
            auth_request_set $auth_user $upstream_http_x_auth_user;
            auth_request_set $auth_role $upstream_http_x_auth_role;
            
            # Pass auth info to backend
            proxy_set_header X-Auth-User $auth_user;
            proxy_set_header X-Auth-Role $auth_role;
            
            # Proxy to model service
            proxy_pass http://model_service/v1/chat/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Increase timeouts for LLM responses
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
            proxy_send_timeout 300s;
        }

        # Internal authentication verification endpoint
        location = /auth/verify {
            internal;
            proxy_pass http://auth_service/auth/verify;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-API-Key $http_x_api_key;
        }

        # Health check endpoints (public)
        location /health {
            access_log off;
            add_header 'Content-Type' 'application/json';
            return 200 '{"status":"healthy"}';
        }

        location /api/health/ {
            # Aggregate health checks
            proxy_pass http://orchestrator_service/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Documentation (public)
        location /docs {
            proxy_pass http://orchestrator_service/docs;
            proxy_set_header Host $host;
        }

        location /openapi.json {
            proxy_pass http://orchestrator_service/openapi.json;
            proxy_set_header Host $host;
        }

        # WebSocket support for real-time features
        location /ws/ {
            # Authentication check
            auth_request /auth/verify;
            
            proxy_pass http://orchestrator_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Default route
        location / {
            return 404 '{"error":"Not Found"}';
            add_header Content-Type application/json;
        }
    }
}