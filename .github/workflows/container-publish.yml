name: 🐳 Build and Publish Containers

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build base images first
  build-base-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        base_image:
          - name: base-python
            dockerfile: docker/Dockerfile.base-python
            image: base-python
          - name: base-ml
            dockerfile: docker/Dockerfile.base-ml
            image: base-ml
            depends_on: base-python

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: ✅ Check if Dockerfile exists
      id: check_dockerfile
      run: |
        if [ -f "${{ matrix.base_image.dockerfile }}" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "✅ Dockerfile exists: ${{ matrix.base_image.dockerfile }}"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "⚠️ Dockerfile not found: ${{ matrix.base_image.dockerfile }}"
        fi

    - name: 🔐 Log in to Container Registry
      if: steps.check_dockerfile.outputs.exists == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Set up Docker Buildx
      if: steps.check_dockerfile.outputs.exists == 'true'
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build base-python dependency
      if: steps.check_dockerfile.outputs.exists == 'true' && matrix.base_image.depends_on == 'base-python'
      run: |
        docker build -f docker/Dockerfile.base-python -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/base-python:latest .
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/base-python:latest vllm-swarm/base-python:latest

    - name: 🏷️ Extract metadata
      id: meta
      if: steps.check_dockerfile.outputs.exists == 'true'
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.base_image.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🐳 Build and push base image
      if: steps.check_dockerfile.outputs.exists == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.base_image.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # Build standard services (no dependencies)
  build-standard-services:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service:
          - name: auth-service
            dockerfile: docker/Dockerfile.auth
            image: auth-service
          - name: orchestrator
            dockerfile: docker/Dockerfile.orchestrator
            image: orchestrator
          - name: memory-api
            dockerfile: docker/Dockerfile.memory-api
            image: memory-api

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: ✅ Check if Dockerfile exists
      id: check_dockerfile
      run: |
        if [ -f "${{ matrix.service.dockerfile }}" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "✅ Dockerfile exists: ${{ matrix.service.dockerfile }}"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "⚠️ Dockerfile not found: ${{ matrix.service.dockerfile }}"
        fi

    - name: 🔐 Log in to Container Registry
      if: steps.check_dockerfile.outputs.exists == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Set up Docker Buildx
      if: steps.check_dockerfile.outputs.exists == 'true'
      uses: docker/setup-buildx-action@v3

    - name: 🏷️ Extract metadata
      id: meta
      if: steps.check_dockerfile.outputs.exists == 'true'
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🐳 Build and push Docker image
      if: steps.check_dockerfile.outputs.exists == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.service.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # Build optimized services (depends on base images)
  build-optimized-services:
    needs: build-base-images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service:
          - name: auth-service-optimized
            dockerfile: docker/Dockerfile.auth-optimized
            image: auth
            tag_suffix: optimized
            base_image: base-python
          - name: orchestrator-optimized
            dockerfile: docker/Dockerfile.orchestrator-optimized
            image: orchestrator
            tag_suffix: optimized
            base_image: base-ml
          - name: memory-api-optimized
            dockerfile: docker/Dockerfile.memory-optimized
            image: memory
            tag_suffix: optimized
            base_image: base-ml

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: ✅ Check if Dockerfile exists
      id: check_dockerfile
      run: |
        if [ -f "${{ matrix.service.dockerfile }}" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "✅ Dockerfile exists: ${{ matrix.service.dockerfile }}"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "⚠️ Dockerfile not found: ${{ matrix.service.dockerfile }}"
        fi

    - name: 🔐 Log in to Container Registry
      if: steps.check_dockerfile.outputs.exists == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Set up Docker Buildx
      if: steps.check_dockerfile.outputs.exists == 'true'
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Pull base images
      if: steps.check_dockerfile.outputs.exists == 'true'
      run: |
        # Pull the published base images
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/base-python:latest
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/base-python:latest vllm-swarm/base-python:latest
        
        if [ "${{ matrix.service.base_image }}" = "base-ml" ]; then
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/base-ml:latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/base-ml:latest vllm-swarm/base-ml:latest
        fi

    - name: 🏷️ Extract metadata
      id: meta
      if: steps.check_dockerfile.outputs.exists == 'true'
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ matrix.service.tag_suffix }}

    - name: 🐳 Build and push optimized Docker image
      if: steps.check_dockerfile.outputs.exists == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.service.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  build-composite:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata for composite
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/vllm-swarm
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🐳 Build and push composite image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.composite
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-and-publish, build-composite]
    permissions:
      contents: read
      packages: read
      security-events: write

    strategy:
      matrix:
        include:
          - service: auth-service
            image: auth-service
          - service: orchestrator
            image: orchestrator
          - service: memory-api
            image: memory-api
          - service: vllm-swarm
            image: vllm-swarm

    steps:
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🛡️ Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.image }}:main-${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'
        severity: 'CRITICAL,HIGH'

    - name: 📤 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
        category: 'trivy-${{ matrix.service }}'

  publish-summary:
    runs-on: ubuntu-latest
    needs: [build-and-publish, build-composite]
    if: always()
    
    steps:
    - name: 📋 Publish Job Summary
      run: |
        echo "## 🐳 Container Publishing Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Published Images:" >> $GITHUB_STEP_SUMMARY
        echo "- \`ghcr.io/${{ github.repository }}/auth-service:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`ghcr.io/${{ github.repository }}/orchestrator:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`ghcr.io/${{ github.repository }}/memory-api:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`ghcr.io/${{ github.repository }}/vllm-swarm:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏷️ Available Tags:" >> $GITHUB_STEP_SUMMARY
        echo "- \`latest\` (main branch)" >> $GITHUB_STEP_SUMMARY
        echo "- \`main\` (main branch)" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ github.sha }}\` (commit hash)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Quick Start:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ghcr.io/${{ github.repository }}/vllm-swarm:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker-compose up -d" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY