# ðŸ’¾ Optimized Memory API Service
# syntax=docker/dockerfile:1.4

# Build stage
FROM ghcr.io/tbowman01/vllm-local-swarm/base-ml:latest AS builder

WORKDIR /app

# Copy requirements
COPY requirements.memory.txt /app/

# Install memory-specific dependencies with cache
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
    pip install --user --no-warn-script-location \
    -r requirements.memory.txt

# Runtime stage
FROM ghcr.io/tbowman01/vllm-local-swarm/base-ml:latest AS runtime

WORKDIR /app

# Copy installed packages from builder
COPY --from=builder --chown=appuser:appuser /root/.local /home/appuser/.local

# Copy application code (changes frequently)
COPY --chown=appuser:appuser memory/ /app/memory/
COPY --chown=appuser:appuser docker/scripts/memory_api_server.py /app/
COPY --chown=appuser:appuser auth/middleware.py /app/auth/middleware.py

# Create necessary directories
RUN mkdir -p /app/memory/sessions /app/memory/agents && \
    chown -R appuser:appuser /app/memory

USER appuser

ENV PATH=/home/appuser/.local/bin:$PATH \
    PYTHONPATH=/app:$PYTHONPATH \
    API_PORT=8003

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python -c "import httpx; httpx.get('http://localhost:8003/health').raise_for_status()"

EXPOSE 8003

CMD ["python", "memory_api_server.py"]